{"version":3,"file":"static/js/351.a339c25f.chunk.js","mappings":"+MAEaA,EAAa,SAACC,GACvB,OAAOA,EAAMC,eAAeC,SAEnBC,EAAc,SAACH,GACxB,OAAOA,EAAMC,eAAeG,U,oBCLhC,EAA4B,2BAA5B,EAA0E,kCAA1E,EAAgI,mC,sCCAhI,EAA+B,kC,UCSlBC,EAAyC,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KACtDC,GAAWC,EAAAA,EAAAA,MAAcD,SAAS,GAExC,OACI,yBACI,SAAC,KAAD,CAASE,UAAS,UAAKJ,KAAYE,EAAZ,UAA0BG,GAAmB,IAAMC,GAAE,mBAAcN,GAA1F,SAAqGC,OCTpGM,EAAkC,SAAC,GAAY,IAAXN,EAAU,EAAVA,KAC7C,OACI,yBAAMA,KCQRO,GAAeC,EAAAA,EAAAA,IAAU,KACzBC,GAAaC,EAAAA,EAAAA,IAAU,GAEhBC,EAAkC,SAAC,GAA4C,IAA3ChB,EAA0C,EAA1CA,QAASiB,EAAiC,EAAjCA,kBAAmBf,EAAc,EAAdA,SACnEgB,EAAiBlB,EAAQmB,KAAI,SAAAC,GAAI,OAAI,SAACT,EAAD,CAASN,KAAMe,EAAKf,MAAWe,EAAKC,OACzEC,EAAgBpB,EAASiB,KAAI,SAAAC,GAAI,OAAI,SAACjB,EAAD,CAA2BC,OAAQgB,EAAKC,GAAIhB,KAAMe,EAAKf,MAArCe,EAAKC,OAOlE,OACI,iBAAKb,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKS,KAEL,eAAIV,UAAWC,EAAf,SACKa,KAEL,SAACC,EAAD,CAAqBC,SAbV,SAACC,GAChBR,EAAkBQ,EAASC,SAC3BD,EAASC,QAAU,UA0CrBH,GAAsBI,EAAAA,EAAAA,GAA4B,CACpDC,KAAM,WADkBD,EAtBP,SAACE,GAClB,IAAOC,EAAgBD,EAAhBC,aAEP,OACI,kBAAMN,SAAUM,EAAhB,WACI,0BACI,SAACC,EAAA,EAAD,CACI1B,KAAK,UACL2B,UAAWC,EAAAA,GACXC,YAAY,0BACZC,SAAU,CAACC,EAAAA,GAAUxB,EAAcE,QAI3C,0BACG,SAAC,KAAD,kCCNf,GAAeuB,EAAAA,EAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KA9BoB,SAACzC,GACrB,MAAO,CACHE,QAASH,EAAWC,GACpBI,SAAUD,EAAYH,OAIH,SAAC0C,GACxB,MAAO,CACHvB,kBAAmB,SAACS,GAAD,OAAqBc,GAASC,EAAAA,EAAAA,IAAwBf,SAmBjF,EA1C0D,SAAC,GAIO,IAHH1B,EAGE,EAHFA,QACAE,EAEE,EAFFA,SACAe,EACE,EADFA,kBAE3D,OACI,SAACD,EAAD,CACIhB,QAASA,EACTE,SAAUA,EACVe,kBAAmBA","sources":["components/Dialogs/dialogs-selectors.ts","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?dc1e","webpack://samurai-way/./src/components/Dialogs/DialogsItem/DialogsItem.module.css?e4ff","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import {RootState} from '../../redux/reduxStore';\r\n\r\nexport const getDialogs = (state: RootState) => {\r\n    return state.dialogsReducer.dialogs\r\n}\r\nexport const getMessages = (state: RootState) => {\r\n    return state.dialogsReducer.messages\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Dialogs_container__7FEZ6\",\"dialogsContainer\":\"Dialogs_dialogsContainer__JqjOo\",\"messagesContainer\":\"Dialogs_messagesContainer__b8VhC\"};","// extracted by mini-css-extract-plugin\nexport default {\"activeDialog\":\"DialogsItem_activeDialog__cxGMu\"};","import React from 'react';\r\nimport {NavLink, useLocation} from 'react-router-dom';\r\n\r\nimport s from './DialogsItem.module.css'\r\n\r\ntype DialogItemProps = {\r\n    number: number\r\n    name: string\r\n}\r\n\r\nexport const DialogsItem: React.FC<DialogItemProps> = ({number, name}) => {\r\n    const pathname = useLocation().pathname[9]\r\n\r\n    return (\r\n        <li>\r\n            <NavLink className={`${number === +pathname ? `${s.activeDialog}` : ''}`} to={`/dialogs/${number}`}>{name}</NavLink>\r\n        </li>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\ntype MessageProps = {\r\n    name: string\r\n}\r\n\r\nexport const Message: React.FC<MessageProps> = ({name}) => {\r\n    return (\r\n        <div>{name}</div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {DialogType, MessageType} from '../../redux/state';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\n\r\nimport s from './Dialogs.module.css'\r\nimport {maxLength, minLength, required, Textarea} from '../common/FormControls/FormControls';\r\nimport {Button} from '../common';\r\nimport {DialogsItem} from './DialogsItem/DialogsItem';\r\nimport {Message} from './Message/Message';\r\n\r\ntype DialogsProps = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n    addMessageHandler: (message: string) => void\r\n}\r\n\r\nconst maxLength100 = maxLength(100);\r\nconst minLength2 = minLength(2)\r\n\r\nexport const Dialogs: React.FC<DialogsProps> = ({dialogs, addMessageHandler, messages}) => {\r\n    const messagesRender = dialogs.map(item => <Message name={item.name} key={item.id}/>)\r\n    const dialogsRender = messages.map(item => <DialogsItem key={item.id} number={item.id} name={item.name}/>)\r\n\r\n    const addMessage = (formData: FormDataType) => {\r\n        addMessageHandler(formData.message)\r\n        formData.message = ''\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <div className={s.messagesContainer}>\r\n                {messagesRender}\r\n            </div>\r\n            <ul className={s.dialogsContainer}>\r\n                {dialogsRender}\r\n            </ul>\r\n            <AddMessageReduxForm onSubmit={addMessage}/>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype FormDataType = {\r\n    message: string\r\n}\r\n\r\nlet AddMessageForm = (props: InjectedFormProps<FormDataType>) => {\r\n    const {handleSubmit} = props;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"message\"\r\n                    component={Textarea}\r\n                    placeholder=\"Type for new message...\"\r\n                    validate={[required, maxLength100, minLength2]}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n               <Button>Add message</Button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType, {}>({\r\n    form: 'message'\r\n})(AddMessageForm)\r\n\r\n","import React from 'react';\r\nimport {addMessageActionCreator} from '../../redux';\r\nimport {connect} from 'react-redux';\r\nimport {AppDispatch, RootState} from '../../redux/reduxStore';\r\nimport {DialogType, MessageType} from '../../redux/state';\r\nimport {withAuthRedirect} from '../../hoc';\r\nimport {compose} from 'redux';\r\nimport {getDialogs, getMessages} from './dialogs-selectors';\r\nimport {Dialogs} from './Dialogs';\r\n\r\n\r\n\r\nconst DialogsContainer: React.FC<DialogsContainerProps> = ({\r\n                                                               dialogs,\r\n                                                               messages,\r\n                                                               addMessageHandler,\r\n                                                           }) => {\r\n    return (\r\n        <Dialogs\r\n            dialogs={dialogs}\r\n            messages={messages}\r\n            addMessageHandler={addMessageHandler}\r\n        />\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n    return {\r\n        dialogs: getDialogs(state),\r\n        messages: getMessages(state)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessageHandler: (message: string) => dispatch(addMessageActionCreator(message)),\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessageHandler: (message: string) => void\r\n}\r\n\r\ntype DialogsContainerProps = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n    addMessageHandler: () => void\r\n    isAuth: boolean | null\r\n}\r\n//export default withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(DialogsContainer));\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(DialogsContainer)\r\n"],"names":["getDialogs","state","dialogsReducer","dialogs","getMessages","messages","DialogsItem","number","name","pathname","useLocation","className","s","to","Message","maxLength100","maxLength","minLength2","minLength","Dialogs","addMessageHandler","messagesRender","map","item","id","dialogsRender","AddMessageReduxForm","onSubmit","formData","message","reduxForm","form","props","handleSubmit","Field","component","Textarea","placeholder","validate","required","compose","withAuthRedirect","connect","dispatch","addMessageActionCreator"],"sourceRoot":""}
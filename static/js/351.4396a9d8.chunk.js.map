{"version":3,"file":"static/js/351.4396a9d8.chunk.js","mappings":"2LACA,EAA+B,kC,UCmB/B,EAV+C,SAAC,GAAoB,IAAnBA,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KAC/CC,GAAWC,EAAAA,EAAAA,MAAcD,SAAS,GAExC,OACI,yBACI,SAAC,KAAD,CAASE,UAAS,UAAKJ,KAAYE,EAAZ,UAA0BG,GAAmB,IAAMC,GAAE,mBAAcN,GAA1F,SAAqGC,OCHjH,EANwC,SAAC,GAAY,IAAXA,EAAU,EAAVA,KACtC,OACI,yBAAMA,K,oBCPd,EAA4B,2B,mBCgBtBM,GAAeC,EAAAA,EAAAA,IAAU,KACzBC,GAAaC,EAAAA,EAAAA,IAAU,GAiDvBC,GAAsBC,EAAAA,EAAAA,GAA4B,CACpDC,KAAM,WADkBD,EAtBP,SAACE,GAClB,IAAOC,EAAgBD,EAAhBC,aAEP,OACI,kBAAMC,SAAUD,EAAhB,WACI,0BACI,SAACE,EAAA,EAAD,CACIhB,KAAK,UACLiB,UAAWC,EAAAA,GACXC,YAAY,0BACZC,SAAU,CAACC,EAAAA,GAAUf,EAAcE,QAI3C,0BACG,SAACc,EAAA,EAAD,kCAWf,EAnDwC,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,kBAAmBC,EAAc,EAAdA,SAC5DC,EAAiBH,EAAQI,KAAI,SAAAC,GAAI,OAAI,SAAC,EAAD,CAAS5B,KAAM4B,EAAK5B,MAAW4B,EAAKC,OACzEC,EAAgBL,EAASE,KAAI,SAAAC,GAAI,OAAI,SAAC,EAAD,CAA2B7B,OAAQ6B,EAAKC,GAAI7B,KAAM4B,EAAK5B,MAArC4B,EAAKC,OAMlE,OACI,iBAAK1B,UAAWC,EAAhB,WACI,wBACK0B,KAEL,2BACKJ,GACD,SAAChB,EAAD,CAAqBK,SAXd,SAACgB,GAChBP,EAAkBO,EAASC,mB,uCCvBtBC,EAAa,SAACC,GACvB,OAAOA,EAAMC,eAAeZ,SAEnBa,EAAc,SAACF,GACxB,OAAOA,EAAMC,eAAeV,UC+ChC,GAAeY,EAAAA,EAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAhBoB,SAACL,GACrB,MAAO,CACHX,QAASU,EAAWC,GACpBT,SAAUW,EAAYF,OAIH,SAACM,GACxB,MAAO,CACHhB,kBAAmB,SAACQ,GAAD,OAAqBQ,GAASC,EAAAA,EAAAA,GAAwBT,SAKjF,EApC0D,SAAC,GAIO,IAHHT,EAGE,EAHFA,QACAE,EAEE,EAFFA,SACAD,EACE,EADFA,kBAE3D,OACI,SAAC,EAAD,CACID,QAASA,EACTE,SAAUA,EACVD,kBAAmBA","sources":["webpack://samurai-way/./src/components/Dialogs/DialogsItem/DialogsItem.module.css?e4ff","components/Dialogs/DialogsItem/DialogsItem.tsx","components/Dialogs/Message/Message.tsx","webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?dc1e","components/Dialogs/Dialogs.tsx","components/Dialogs/dialogs-selectors.ts","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"activeDialog\":\"DialogsItem_activeDialog__cxGMu\"};","import React from 'react';\r\nimport {NavLink, useLocation} from 'react-router-dom';\r\n\r\nimport s from './DialogsItem.module.css'\r\n\r\ntype DialogItemProps = {\r\n    number: number\r\n    name: string\r\n}\r\n\r\nconst DialogsItem: React.FC<DialogItemProps> = ({number, name}) => {\r\n    const pathname = useLocation().pathname[9]\r\n\r\n    return (\r\n        <li>\r\n            <NavLink className={`${number === +pathname ? `${s.activeDialog}` : ''}`} to={`/dialogs/${number}`}>{name}</NavLink>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default DialogsItem;\r\n","import React from 'react';\r\n\r\ntype MessageProps = {\r\n    name: string\r\n}\r\n\r\nconst Message: React.FC<MessageProps> = ({name}) => {\r\n    return (\r\n        <div>{name}</div>\r\n    );\r\n};\r\n\r\nexport default Message;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Dialogs_container__7FEZ6\"};","import React from 'react';\r\nimport {DialogType, MessageType} from '../../redux/state';\r\n\r\nimport DialogsItem from './DialogsItem/DialogsItem';\r\nimport Message from './Message/Message';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\n\r\nimport s from './Dialogs.module.css'\r\nimport {maxLength, minLength, required, Textarea} from '../common/FormControls/FormControls';\r\nimport {Button} from '../common/Button/Button';\r\n\r\ntype DialogsProps = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n    addMessageHandler: (message: string) => void\r\n}\r\n\r\nconst maxLength100 = maxLength(100);\r\nconst minLength2 = minLength(2)\r\n\r\nconst Dialogs: React.FC<DialogsProps> = ({dialogs, addMessageHandler, messages}) => {\r\n    const messagesRender = dialogs.map(item => <Message name={item.name} key={item.id}/>)\r\n    const dialogsRender = messages.map(item => <DialogsItem key={item.id} number={item.id} name={item.name}/>)\r\n\r\n    const addMessage = (formData: FormDataType) => {\r\n        addMessageHandler(formData.message)\r\n    }\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <ul>\r\n                {dialogsRender}\r\n            </ul>\r\n            <div>\r\n                {messagesRender}\r\n                <AddMessageReduxForm onSubmit={addMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\ntype FormDataType = {\r\n    message: string\r\n}\r\n\r\nlet AddMessageForm = (props: InjectedFormProps<FormDataType>) => {\r\n    const {handleSubmit} = props;\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    name=\"message\"\r\n                    component={Textarea}\r\n                    placeholder=\"Type for new message...\"\r\n                    validate={[required, maxLength100, minLength2]}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n               <Button>Add message</Button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm<FormDataType, {}>({\r\n    form: 'message'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n","import {RootState} from '../../redux/reduxStore';\r\n\r\nexport const getDialogs = (state: RootState) => {\r\n    return state.dialogsReducer.dialogs\r\n}\r\nexport const getMessages = (state: RootState) => {\r\n    return state.dialogsReducer.messages\r\n}\r\n","import React from 'react';\r\nimport Dialogs from './Dialogs';\r\nimport {addMessageActionCreator} from '../../redux/reducers/dialogsReducer';\r\nimport {connect} from 'react-redux';\r\nimport {AppDispatch, RootState} from '../../redux/reduxStore';\r\nimport {DialogType, MessageType} from '../../redux/state';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {getDialogs, getMessages} from './dialogs-selectors';\r\n\r\ntype DialogsContainerProps = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n    addMessageHandler: () => void\r\n    isAuth: boolean | null\r\n}\r\n\r\nconst DialogsContainer: React.FC<DialogsContainerProps> = ({\r\n                                                               dialogs,\r\n                                                               messages,\r\n                                                               addMessageHandler,\r\n                                                           }) => {\r\n    return (\r\n        <Dialogs\r\n            dialogs={dialogs}\r\n            messages={messages}\r\n            addMessageHandler={addMessageHandler}\r\n        />\r\n    )\r\n};\r\n\r\ntype MapStateToPropsType = {\r\n    dialogs: DialogType[]\r\n    messages: MessageType[]\r\n}\r\ntype MapDispatchToPropsType = {\r\n    addMessageHandler: (message: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: RootState): MapStateToPropsType => {\r\n    return {\r\n        dialogs: getDialogs(state),\r\n        messages: getMessages(state)\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addMessageHandler: (message: string) => dispatch(addMessageActionCreator(message)),\r\n    }\r\n}\r\n\r\n//export default withAuthRedirect(connect(mapStateToProps, mapDispatchToProps)(DialogsContainer));\r\nexport default compose<React.ComponentType>(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(DialogsContainer)\r\n"],"names":["number","name","pathname","useLocation","className","s","to","maxLength100","maxLength","minLength2","minLength","AddMessageReduxForm","reduxForm","form","props","handleSubmit","onSubmit","Field","component","Textarea","placeholder","validate","required","Button","dialogs","addMessageHandler","messages","messagesRender","map","item","id","dialogsRender","formData","message","getDialogs","state","dialogsReducer","getMessages","compose","withAuthRedirect","connect","dispatch","addMessageActionCreator"],"sourceRoot":""}